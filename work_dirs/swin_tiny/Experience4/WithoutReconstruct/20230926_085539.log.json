{"env_info": "sys.platform: linux\nPython: 3.8.17 | packaged by conda-forge | (default, Jun 16 2023, 07:06:00) [GCC 11.4.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.31057947_0\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.8.0\nMMCV: 1.4.2\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMClassification: 0.24.0+", "seed": 397440985, "mmcls_version": "0.24.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformer',\n        arch='tiny',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'pretrain_model/swin_tiny_224_b16x64_300e_imagenet_20210616_090925-66df6be6.pth',\n            prefix='backbone'),\n        img_size=224,\n        drop_path_rate=0.2),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=46,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(\n            type='LabelSmoothLoss',\n            label_smooth_val=0.1,\n            mode='original',\n            loss_weight=[\n                0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.2, 1,\n                1, 1, 1, 1, 1, 1\n            ]),\n        cal_acc=False),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=46, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=46, prob=0.5)\n    ]))\nrand_increasing_policies = [\n    dict(type='AutoContrast'),\n    dict(type='Equalize'),\n    dict(type='Invert'),\n    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),\n    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),\n    dict(\n        type='SolarizeAdd',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 110)),\n    dict(\n        type='ColorTransform',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Brightness', magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(\n        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='horizontal'),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='vertical'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='horizontal'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='vertical')\n]\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='RandAugment',\n        policies=[\n            dict(type='AutoContrast'),\n            dict(type='Equalize'),\n            dict(type='Invert'),\n            dict(\n                type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n            dict(\n                type='Posterize', magnitude_key='bits',\n                magnitude_range=(4, 0)),\n            dict(\n                type='Solarize', magnitude_key='thr',\n                magnitude_range=(256, 0)),\n            dict(\n                type='SolarizeAdd',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 110)),\n            dict(\n                type='ColorTransform',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Contrast',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Brightness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Sharpness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='horizontal'),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='vertical'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='horizontal'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='vertical')\n        ],\n        num_policies=2,\n        total_level=10,\n        magnitude_level=9,\n        magnitude_std=0.5,\n        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),\n    dict(\n        type='RandomErasing',\n        erase_prob=0.25,\n        mode='rand',\n        min_area_ratio=0.02,\n        max_area_ratio=0.3333333333333333,\n        fill_color=[103.53, 116.28, 123.675],\n        fill_std=[57.375, 57.12, 58.395]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=120,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/JML/Experience4/Reconstruct/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='RandAugment',\n                policies=[\n                    dict(type='AutoContrast'),\n                    dict(type='Equalize'),\n                    dict(type='Invert'),\n                    dict(\n                        type='Rotate',\n                        magnitude_key='angle',\n                        magnitude_range=(0, 180)),\n                    dict(\n                        type='Posterize',\n                        magnitude_key='bits',\n                        magnitude_range=(4, 0)),\n                    dict(\n                        type='Solarize',\n                        magnitude_key='thr',\n                        magnitude_range=(256, 0)),\n                    dict(\n                        type='SolarizeAdd',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 110)),\n                    dict(\n                        type='ColorTransform',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Contrast',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Brightness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Sharpness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='horizontal'),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='vertical'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='horizontal'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='vertical')\n                ],\n                num_policies=2,\n                total_level=10,\n                magnitude_level=9,\n                magnitude_std=0.5,\n                hparams=dict(pad_val=[104, 116, 124],\n                             interpolation='bicubic')),\n            dict(\n                type='RandomErasing',\n                erase_prob=0.25,\n                mode='rand',\n                min_area_ratio=0.02,\n                max_area_ratio=0.3333333333333333,\n                fill_color=[103.53, 116.28, 123.675],\n                fill_std=[57.375, 57.12, 58.395]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        Batch_size=120),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/JML/Integrate_test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/JML/Integrate_test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=10, metric='accuracy')\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }))\noptimizer = dict(\n    type='AdamW',\n    lr=0.001,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        })))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    min_lr_ratio=0.01,\n    warmup='linear',\n    warmup_ratio=0.001,\n    warmup_iters=20,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=150)\ncheckpoint_config = dict(interval=30, save_optimizer=True)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'work_dirs/swin_tiny/Experience4/WithoutReconstruct'\ngpu_ids = range(0, 2)\ndevice = 'cuda'\nseed = 397440985\n", "CLASSES": ["negative", "yl_jml_bhc_500P", "yl_jml_bhc_600P", "yl_jml_btxl_500P", "yl_jml_cc_bdnmbhc_500P", "yl_jml_cc_bzqtlc_500P", "yl_jml_cc_kxjymlh_500P", "yl_jml_dpbhc_750P", "yl_jml_dpbtxl_750P", "yl_jml_dpfmyz_750P", "yl_jml_dplc_750P", "yl_jml_dplzs_750P", "yl_jml_dpmlmc_750P", "yl_jml_dpqmlc_750P", "yl_jml_fmyz_500P", "yl_jml_jjnm_500P", "yl_jml_jk_kqs_570P", "yl_jml_kqs_550P", "yl_jml_lbk_550P", "yl_jml_lc_500P", "yl_jml_lc_600P", "yl_jml_lpbhc_1000P", "yl_jml_lpbtxl_1000P", "yl_jml_lpfmyz_1000P", "yl_jml_lplc_1000P", "yl_jml_lpmlmc_1000P", "yl_jml_lpqmlc_1000P", "yl_jml_mdxz_hls_500P", "yl_jml_mdxz_mts500P", "yl_jml_mdxz_mts_500P", "yl_jml_mdxz_nms500P", "yl_jml_mdxz_nms_500P", "yl_jml_mdxz_qms_500P", "yl_jml_mdxz_qpgs500P", "yl_jml_mdxz_qpgs_500P", "yl_jml_mdxz_xgs_500P", "yl_jml_mlmc_500P", "yl_jml_mlmc_600P", "yl_jml_others", "yl_jml_qmlc_500P", "yl_jml_rsjs_450P", "yl_jml_sdsbtw_450P", "yl_jml_sdsnmw_450P", "yl_jml_sdsyw_450P", "yl_jml_smt_500P", "yl_jml_wsss_450P"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 13862, "data_time": 0.03538, "loss": 2.92769, "time": 0.52329}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 8e-05, "memory": 13862, "data_time": 0.03088, "loss": 2.00507, "time": 0.51545}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00013, "memory": 13862, "data_time": 0.03108, "loss": 1.75007, "time": 0.51597}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00018, "memory": 13862, "data_time": 0.03034, "loss": 1.67526, "time": 0.52219}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00023, "memory": 13862, "data_time": 0.03134, "loss": 1.61938, "time": 0.5242}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.00028, "memory": 13862, "data_time": 0.03065, "loss": 1.57567, "time": 0.5215}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.00033, "memory": 13862, "data_time": 0.03216, "loss": 1.57639, "time": 0.53004}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.00038, "memory": 13862, "data_time": 0.03271, "loss": 1.59902, "time": 0.52726}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.00043, "memory": 13862, "data_time": 0.03387, "loss": 1.59152, "time": 0.52784}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.00048, "memory": 13862, "data_time": 0.03283, "loss": 1.57372, "time": 0.52375}
{"mode": "val", "epoch": 10, "iter": 64, "lr": 0.00049, "accuracy_top-1": 91.50267, "accuracy_top-5": 99.79799}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.00052, "memory": 13862, "data_time": 0.03032, "loss": 1.58613, "time": 0.50434}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.00057, "memory": 13862, "data_time": 0.0307, "loss": 1.56299, "time": 0.51371}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.00062, "memory": 13862, "data_time": 0.03061, "loss": 1.56318, "time": 0.52003}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.00067, "memory": 13862, "data_time": 0.03257, "loss": 1.59838, "time": 0.52436}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.00071, "memory": 13862, "data_time": 0.03192, "loss": 1.59076, "time": 0.52347}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.00076, "memory": 13862, "data_time": 0.03231, "loss": 1.62878, "time": 0.52105}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.00081, "memory": 13862, "data_time": 0.03153, "loss": 1.6015, "time": 0.52215}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.00085, "memory": 13862, "data_time": 0.0312, "loss": 1.60867, "time": 0.51881}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.0009, "memory": 13862, "data_time": 0.03249, "loss": 1.64727, "time": 0.51821}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.00094, "memory": 13862, "data_time": 0.03096, "loss": 1.62305, "time": 0.51752}
{"mode": "val", "epoch": 20, "iter": 64, "lr": 0.00096, "accuracy_top-1": 91.3528, "accuracy_top-5": 99.76541}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.00095, "memory": 13862, "data_time": 0.03133, "loss": 1.62681, "time": 0.50376}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.00095, "memory": 13862, "data_time": 0.0311, "loss": 1.61405, "time": 0.5169}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 0.00095, "memory": 13862, "data_time": 0.03099, "loss": 1.62352, "time": 0.51679}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 0.00094, "memory": 13862, "data_time": 0.03128, "loss": 1.60954, "time": 0.51981}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 0.00094, "memory": 13862, "data_time": 0.03051, "loss": 1.64083, "time": 0.52007}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 0.00093, "memory": 13862, "data_time": 0.03087, "loss": 1.57679, "time": 0.52361}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 0.00093, "memory": 13862, "data_time": 0.03176, "loss": 1.58365, "time": 0.52551}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.00092, "memory": 13862, "data_time": 0.03122, "loss": 1.58484, "time": 0.52467}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.00091, "memory": 13862, "data_time": 0.0305, "loss": 1.56717, "time": 0.52596}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 0.00091, "memory": 13862, "data_time": 0.03195, "loss": 1.56254, "time": 0.52089}
{"mode": "val", "epoch": 30, "iter": 64, "lr": 0.00091, "accuracy_top-1": 92.05005, "accuracy_top-5": 99.83057}
{"mode": "train", "epoch": 31, "iter": 100, "lr": 0.0009, "memory": 13862, "data_time": 0.03387, "loss": 1.53077, "time": 0.51067}
{"mode": "train", "epoch": 32, "iter": 100, "lr": 0.0009, "memory": 13862, "data_time": 0.03188, "loss": 1.538, "time": 0.52318}
{"mode": "train", "epoch": 33, "iter": 100, "lr": 0.00089, "memory": 13862, "data_time": 0.03084, "loss": 1.5855, "time": 0.52189}
{"mode": "train", "epoch": 34, "iter": 100, "lr": 0.00088, "memory": 13862, "data_time": 0.03209, "loss": 1.57286, "time": 0.52973}
{"mode": "train", "epoch": 35, "iter": 100, "lr": 0.00088, "memory": 13862, "data_time": 0.03269, "loss": 1.56946, "time": 0.53122}
{"mode": "train", "epoch": 36, "iter": 100, "lr": 0.00087, "memory": 13862, "data_time": 0.03157, "loss": 1.54301, "time": 0.53261}
{"mode": "train", "epoch": 37, "iter": 100, "lr": 0.00086, "memory": 13862, "data_time": 0.03285, "loss": 1.55806, "time": 0.53188}
{"mode": "train", "epoch": 38, "iter": 100, "lr": 0.00085, "memory": 13862, "data_time": 0.03155, "loss": 1.5621, "time": 0.52851}
{"mode": "train", "epoch": 39, "iter": 100, "lr": 0.00085, "memory": 13862, "data_time": 0.03272, "loss": 1.52861, "time": 0.52165}
{"mode": "train", "epoch": 40, "iter": 100, "lr": 0.00084, "memory": 13862, "data_time": 0.03219, "loss": 1.57105, "time": 0.52313}
{"mode": "val", "epoch": 40, "iter": 64, "lr": 0.00084, "accuracy_top-1": 91.75681, "accuracy_top-5": 99.85012}
{"mode": "train", "epoch": 41, "iter": 100, "lr": 0.00083, "memory": 13862, "data_time": 0.03148, "loss": 1.52137, "time": 0.50939}
{"mode": "train", "epoch": 42, "iter": 100, "lr": 0.00082, "memory": 13862, "data_time": 0.03302, "loss": 1.52242, "time": 0.52012}
{"mode": "train", "epoch": 43, "iter": 100, "lr": 0.00082, "memory": 13862, "data_time": 0.03286, "loss": 1.54088, "time": 0.52402}
{"mode": "train", "epoch": 44, "iter": 100, "lr": 0.00081, "memory": 13862, "data_time": 0.03226, "loss": 1.50997, "time": 0.51975}
{"mode": "train", "epoch": 45, "iter": 100, "lr": 0.0008, "memory": 13862, "data_time": 0.03069, "loss": 1.5318, "time": 0.52116}
{"mode": "train", "epoch": 46, "iter": 100, "lr": 0.00079, "memory": 13862, "data_time": 0.03174, "loss": 1.52599, "time": 0.52244}
{"mode": "train", "epoch": 47, "iter": 100, "lr": 0.00078, "memory": 13862, "data_time": 0.03129, "loss": 1.52192, "time": 0.52171}
{"mode": "train", "epoch": 48, "iter": 100, "lr": 0.00077, "memory": 13862, "data_time": 0.03134, "loss": 1.49318, "time": 0.52388}
{"mode": "train", "epoch": 49, "iter": 100, "lr": 0.00077, "memory": 13862, "data_time": 0.03074, "loss": 1.50303, "time": 0.52501}
{"mode": "train", "epoch": 50, "iter": 100, "lr": 0.00076, "memory": 13862, "data_time": 0.03126, "loss": 1.47695, "time": 0.52936}
{"mode": "val", "epoch": 50, "iter": 64, "lr": 0.00075, "accuracy_top-1": 92.16082, "accuracy_top-5": 99.85664}
{"mode": "train", "epoch": 51, "iter": 100, "lr": 0.00075, "memory": 13862, "data_time": 0.03115, "loss": 1.49863, "time": 0.50784}
{"mode": "train", "epoch": 52, "iter": 100, "lr": 0.00074, "memory": 13862, "data_time": 0.03273, "loss": 1.49566, "time": 0.51976}
{"mode": "train", "epoch": 53, "iter": 100, "lr": 0.00073, "memory": 13862, "data_time": 0.0329, "loss": 1.50223, "time": 0.52646}
{"mode": "train", "epoch": 54, "iter": 100, "lr": 0.00072, "memory": 13862, "data_time": 0.03271, "loss": 1.53318, "time": 0.53068}
{"mode": "train", "epoch": 55, "iter": 100, "lr": 0.00071, "memory": 13862, "data_time": 0.03452, "loss": 1.45572, "time": 0.53381}
{"mode": "train", "epoch": 56, "iter": 100, "lr": 0.0007, "memory": 13862, "data_time": 0.0323, "loss": 1.44905, "time": 0.52682}
{"mode": "train", "epoch": 57, "iter": 100, "lr": 0.00069, "memory": 13862, "data_time": 0.032, "loss": 1.45595, "time": 0.52908}
{"mode": "train", "epoch": 58, "iter": 100, "lr": 0.00068, "memory": 13862, "data_time": 0.03294, "loss": 1.47243, "time": 0.52758}
{"mode": "train", "epoch": 59, "iter": 100, "lr": 0.00067, "memory": 13862, "data_time": 0.03362, "loss": 1.46078, "time": 0.52529}
{"mode": "train", "epoch": 60, "iter": 100, "lr": 0.00066, "memory": 13862, "data_time": 0.03226, "loss": 1.4651, "time": 0.52285}
{"mode": "val", "epoch": 60, "iter": 64, "lr": 0.00066, "accuracy_top-1": 91.93927, "accuracy_top-5": 99.86967}
{"mode": "train", "epoch": 61, "iter": 100, "lr": 0.00065, "memory": 13862, "data_time": 0.03328, "loss": 1.48396, "time": 0.51803}
{"mode": "train", "epoch": 62, "iter": 100, "lr": 0.00064, "memory": 13862, "data_time": 0.03204, "loss": 1.44148, "time": 0.52579}
{"mode": "train", "epoch": 63, "iter": 100, "lr": 0.00063, "memory": 13862, "data_time": 0.0318, "loss": 1.48971, "time": 0.52659}
{"mode": "train", "epoch": 64, "iter": 100, "lr": 0.00062, "memory": 13862, "data_time": 0.03327, "loss": 1.45283, "time": 0.53015}
{"mode": "train", "epoch": 65, "iter": 100, "lr": 0.00061, "memory": 13862, "data_time": 0.03353, "loss": 1.46878, "time": 0.52775}
{"mode": "train", "epoch": 66, "iter": 100, "lr": 0.0006, "memory": 13862, "data_time": 0.03189, "loss": 1.42094, "time": 0.52525}
{"mode": "train", "epoch": 67, "iter": 100, "lr": 0.00059, "memory": 13862, "data_time": 0.03309, "loss": 1.43726, "time": 0.52783}
{"mode": "train", "epoch": 68, "iter": 100, "lr": 0.00058, "memory": 13862, "data_time": 0.03351, "loss": 1.44342, "time": 0.53033}
{"mode": "train", "epoch": 69, "iter": 100, "lr": 0.00057, "memory": 13862, "data_time": 0.041, "loss": 1.45398, "time": 0.53853}
{"mode": "train", "epoch": 70, "iter": 100, "lr": 0.00056, "memory": 13862, "data_time": 0.03158, "loss": 1.447, "time": 0.52781}
{"mode": "val", "epoch": 70, "iter": 64, "lr": 0.00056, "accuracy_top-1": 92.40845, "accuracy_top-5": 99.74586}
{"mode": "train", "epoch": 71, "iter": 100, "lr": 0.00055, "memory": 13862, "data_time": 0.03245, "loss": 1.4315, "time": 0.50768}
{"mode": "train", "epoch": 72, "iter": 100, "lr": 0.00054, "memory": 13862, "data_time": 0.0338, "loss": 1.46937, "time": 0.52009}
{"mode": "train", "epoch": 73, "iter": 100, "lr": 0.00053, "memory": 13862, "data_time": 0.03172, "loss": 1.42247, "time": 0.52907}
{"mode": "train", "epoch": 74, "iter": 100, "lr": 0.00052, "memory": 13862, "data_time": 0.03366, "loss": 1.45437, "time": 0.53334}
{"mode": "train", "epoch": 75, "iter": 100, "lr": 0.00051, "memory": 13862, "data_time": 0.03335, "loss": 1.43722, "time": 0.53417}
{"mode": "train", "epoch": 76, "iter": 100, "lr": 0.0005, "memory": 13862, "data_time": 0.03451, "loss": 1.42648, "time": 0.5291}
{"mode": "train", "epoch": 77, "iter": 100, "lr": 0.00049, "memory": 13862, "data_time": 0.03082, "loss": 1.43141, "time": 0.52728}
{"mode": "train", "epoch": 78, "iter": 100, "lr": 0.00048, "memory": 13862, "data_time": 0.03217, "loss": 1.40534, "time": 0.52651}
{"mode": "train", "epoch": 79, "iter": 100, "lr": 0.00047, "memory": 13862, "data_time": 0.03084, "loss": 1.40286, "time": 0.52436}
{"mode": "train", "epoch": 80, "iter": 100, "lr": 0.00046, "memory": 13862, "data_time": 0.03214, "loss": 1.44761, "time": 0.52438}
{"mode": "val", "epoch": 80, "iter": 64, "lr": 0.00045, "accuracy_top-1": 92.21295, "accuracy_top-5": 99.79799}
{"mode": "train", "epoch": 81, "iter": 100, "lr": 0.00045, "memory": 13862, "data_time": 0.03182, "loss": 1.42492, "time": 0.51357}
{"mode": "train", "epoch": 82, "iter": 100, "lr": 0.00044, "memory": 13862, "data_time": 0.03297, "loss": 1.3896, "time": 0.52079}
{"mode": "train", "epoch": 83, "iter": 100, "lr": 0.00043, "memory": 13862, "data_time": 0.03293, "loss": 1.43273, "time": 0.52697}
{"mode": "train", "epoch": 84, "iter": 100, "lr": 0.00042, "memory": 13862, "data_time": 0.03116, "loss": 1.42174, "time": 0.52536}
{"mode": "train", "epoch": 85, "iter": 100, "lr": 0.00041, "memory": 13862, "data_time": 0.03373, "loss": 1.36722, "time": 0.52807}
{"mode": "train", "epoch": 86, "iter": 100, "lr": 0.0004, "memory": 13862, "data_time": 0.03452, "loss": 1.39467, "time": 0.52957}
{"mode": "train", "epoch": 87, "iter": 100, "lr": 0.00039, "memory": 13862, "data_time": 0.03449, "loss": 1.35115, "time": 0.54091}
{"mode": "train", "epoch": 88, "iter": 100, "lr": 0.00038, "memory": 13862, "data_time": 0.03363, "loss": 1.42802, "time": 0.5394}
{"mode": "train", "epoch": 89, "iter": 100, "lr": 0.00037, "memory": 13862, "data_time": 0.03406, "loss": 1.37752, "time": 0.53565}
{"mode": "train", "epoch": 90, "iter": 100, "lr": 0.00036, "memory": 13862, "data_time": 0.03348, "loss": 1.33338, "time": 0.53555}
{"mode": "val", "epoch": 90, "iter": 64, "lr": 0.00035, "accuracy_top-1": 92.47361, "accuracy_top-5": 99.81103}
{"mode": "train", "epoch": 91, "iter": 100, "lr": 0.00035, "memory": 13862, "data_time": 0.03191, "loss": 1.40779, "time": 0.50994}
{"mode": "train", "epoch": 92, "iter": 100, "lr": 0.00034, "memory": 13862, "data_time": 0.03218, "loss": 1.40304, "time": 0.52157}
{"mode": "train", "epoch": 93, "iter": 100, "lr": 0.00033, "memory": 13862, "data_time": 0.0341, "loss": 1.41097, "time": 0.52778}
{"mode": "train", "epoch": 94, "iter": 100, "lr": 0.00032, "memory": 13862, "data_time": 0.03218, "loss": 1.37576, "time": 0.52969}
{"mode": "train", "epoch": 95, "iter": 100, "lr": 0.00031, "memory": 13862, "data_time": 0.03174, "loss": 1.35799, "time": 0.5284}
{"mode": "train", "epoch": 96, "iter": 100, "lr": 0.0003, "memory": 13862, "data_time": 0.03101, "loss": 1.35084, "time": 0.52781}
{"mode": "train", "epoch": 97, "iter": 100, "lr": 0.00029, "memory": 13862, "data_time": 0.03276, "loss": 1.37814, "time": 0.52787}
{"mode": "train", "epoch": 98, "iter": 100, "lr": 0.00028, "memory": 13862, "data_time": 0.0318, "loss": 1.36787, "time": 0.52831}
{"mode": "train", "epoch": 99, "iter": 100, "lr": 0.00027, "memory": 13862, "data_time": 0.03148, "loss": 1.4044, "time": 0.52799}
{"mode": "train", "epoch": 100, "iter": 100, "lr": 0.00026, "memory": 13862, "data_time": 0.03357, "loss": 1.32316, "time": 0.53192}
{"mode": "val", "epoch": 100, "iter": 64, "lr": 0.00026, "accuracy_top-1": 92.27811, "accuracy_top-5": 99.83709}
{"mode": "train", "epoch": 101, "iter": 100, "lr": 0.00025, "memory": 13862, "data_time": 0.03059, "loss": 1.36288, "time": 0.50812}
{"mode": "train", "epoch": 102, "iter": 100, "lr": 0.00024, "memory": 13862, "data_time": 0.03294, "loss": 1.38897, "time": 0.52132}
{"mode": "train", "epoch": 103, "iter": 100, "lr": 0.00023, "memory": 13862, "data_time": 0.03244, "loss": 1.35788, "time": 0.52379}
{"mode": "train", "epoch": 104, "iter": 100, "lr": 0.00023, "memory": 13862, "data_time": 0.03033, "loss": 1.33586, "time": 0.52675}
{"mode": "train", "epoch": 105, "iter": 100, "lr": 0.00022, "memory": 13862, "data_time": 0.03134, "loss": 1.33211, "time": 0.52871}
{"mode": "train", "epoch": 106, "iter": 100, "lr": 0.00021, "memory": 13862, "data_time": 0.03254, "loss": 1.31225, "time": 0.53016}
{"mode": "train", "epoch": 107, "iter": 100, "lr": 0.0002, "memory": 13862, "data_time": 0.03193, "loss": 1.33877, "time": 0.53102}
{"mode": "train", "epoch": 108, "iter": 100, "lr": 0.00019, "memory": 13862, "data_time": 0.0322, "loss": 1.35364, "time": 0.52803}
{"mode": "train", "epoch": 109, "iter": 100, "lr": 0.00018, "memory": 13862, "data_time": 0.03319, "loss": 1.28994, "time": 0.52699}
{"mode": "train", "epoch": 110, "iter": 100, "lr": 0.00018, "memory": 13862, "data_time": 0.03198, "loss": 1.33865, "time": 0.52514}
{"mode": "val", "epoch": 110, "iter": 64, "lr": 0.00017, "accuracy_top-1": 92.53226, "accuracy_top-5": 99.7589}
{"mode": "train", "epoch": 111, "iter": 100, "lr": 0.00017, "memory": 13862, "data_time": 0.03125, "loss": 1.3078, "time": 0.52428}
{"mode": "train", "epoch": 112, "iter": 100, "lr": 0.00016, "memory": 13862, "data_time": 0.03302, "loss": 1.30181, "time": 0.5246}
{"mode": "train", "epoch": 113, "iter": 100, "lr": 0.00015, "memory": 13862, "data_time": 0.03204, "loss": 1.32704, "time": 0.52909}
{"mode": "train", "epoch": 114, "iter": 100, "lr": 0.00015, "memory": 13862, "data_time": 0.03406, "loss": 1.33771, "time": 0.53294}
{"mode": "train", "epoch": 115, "iter": 100, "lr": 0.00014, "memory": 13862, "data_time": 0.03196, "loss": 1.31891, "time": 0.52999}
{"mode": "train", "epoch": 116, "iter": 100, "lr": 0.00013, "memory": 13862, "data_time": 0.03238, "loss": 1.26972, "time": 0.52615}
{"mode": "train", "epoch": 117, "iter": 100, "lr": 0.00013, "memory": 13862, "data_time": 0.03217, "loss": 1.34327, "time": 0.52605}
{"mode": "train", "epoch": 118, "iter": 100, "lr": 0.00012, "memory": 13862, "data_time": 0.03146, "loss": 1.2818, "time": 0.52557}
{"mode": "train", "epoch": 119, "iter": 100, "lr": 0.00011, "memory": 13862, "data_time": 0.03186, "loss": 1.29493, "time": 0.52671}
{"mode": "train", "epoch": 120, "iter": 100, "lr": 0.00011, "memory": 13862, "data_time": 0.03452, "loss": 1.34788, "time": 0.53259}
{"mode": "val", "epoch": 120, "iter": 64, "lr": 0.0001, "accuracy_top-1": 92.76685, "accuracy_top-5": 99.83057}
{"mode": "train", "epoch": 121, "iter": 100, "lr": 0.0001, "memory": 13862, "data_time": 0.03207, "loss": 1.32574, "time": 0.53595}
{"mode": "train", "epoch": 122, "iter": 100, "lr": 0.0001, "memory": 13862, "data_time": 0.03415, "loss": 1.31622, "time": 0.54518}
{"mode": "train", "epoch": 123, "iter": 100, "lr": 9e-05, "memory": 13862, "data_time": 0.03412, "loss": 1.29878, "time": 0.542}
{"mode": "train", "epoch": 124, "iter": 100, "lr": 8e-05, "memory": 13862, "data_time": 0.03269, "loss": 1.31618, "time": 0.53809}
{"mode": "train", "epoch": 125, "iter": 100, "lr": 8e-05, "memory": 13862, "data_time": 0.03281, "loss": 1.27787, "time": 0.53839}
{"mode": "train", "epoch": 126, "iter": 100, "lr": 7e-05, "memory": 13862, "data_time": 0.03086, "loss": 1.2762, "time": 0.53487}
{"mode": "train", "epoch": 127, "iter": 100, "lr": 7e-05, "memory": 13862, "data_time": 0.03325, "loss": 1.29066, "time": 0.52933}
{"mode": "train", "epoch": 128, "iter": 100, "lr": 6e-05, "memory": 13862, "data_time": 0.03213, "loss": 1.28256, "time": 0.53068}
{"mode": "train", "epoch": 129, "iter": 100, "lr": 6e-05, "memory": 13862, "data_time": 0.0361, "loss": 1.28757, "time": 0.53671}
{"mode": "train", "epoch": 130, "iter": 100, "lr": 5e-05, "memory": 13862, "data_time": 0.03187, "loss": 1.27326, "time": 0.53449}
{"mode": "val", "epoch": 130, "iter": 64, "lr": 5e-05, "accuracy_top-1": 92.53226, "accuracy_top-5": 99.76541}
{"mode": "train", "epoch": 131, "iter": 100, "lr": 5e-05, "memory": 13862, "data_time": 0.03208, "loss": 1.24552, "time": 0.53343}
{"mode": "train", "epoch": 132, "iter": 100, "lr": 5e-05, "memory": 13862, "data_time": 0.03103, "loss": 1.3052, "time": 0.5284}
{"mode": "train", "epoch": 133, "iter": 100, "lr": 4e-05, "memory": 13862, "data_time": 0.03116, "loss": 1.33461, "time": 0.52933}
{"mode": "train", "epoch": 134, "iter": 100, "lr": 4e-05, "memory": 13862, "data_time": 0.03117, "loss": 1.26936, "time": 0.52625}
{"mode": "train", "epoch": 135, "iter": 100, "lr": 4e-05, "memory": 13862, "data_time": 0.03188, "loss": 1.32, "time": 0.52749}
{"mode": "train", "epoch": 136, "iter": 100, "lr": 3e-05, "memory": 13862, "data_time": 0.03256, "loss": 1.2839, "time": 0.52904}
{"mode": "train", "epoch": 137, "iter": 100, "lr": 3e-05, "memory": 13862, "data_time": 0.03224, "loss": 1.30602, "time": 0.53046}
{"mode": "train", "epoch": 138, "iter": 100, "lr": 3e-05, "memory": 13862, "data_time": 0.03304, "loss": 1.24686, "time": 0.5322}
{"mode": "train", "epoch": 139, "iter": 100, "lr": 2e-05, "memory": 13862, "data_time": 0.02995, "loss": 1.32936, "time": 0.53077}
{"mode": "train", "epoch": 140, "iter": 100, "lr": 2e-05, "memory": 13862, "data_time": 0.03157, "loss": 1.30329, "time": 0.5299}
{"mode": "val", "epoch": 140, "iter": 64, "lr": 2e-05, "accuracy_top-1": 92.61697, "accuracy_top-5": 99.79147}
{"mode": "train", "epoch": 141, "iter": 100, "lr": 2e-05, "memory": 13862, "data_time": 0.03054, "loss": 1.34009, "time": 0.52308}
{"mode": "train", "epoch": 142, "iter": 100, "lr": 2e-05, "memory": 13862, "data_time": 0.03077, "loss": 1.25475, "time": 0.52502}
{"mode": "train", "epoch": 143, "iter": 100, "lr": 2e-05, "memory": 13862, "data_time": 0.03094, "loss": 1.31096, "time": 0.52834}
{"mode": "train", "epoch": 144, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03152, "loss": 1.26175, "time": 0.53285}
{"mode": "train", "epoch": 145, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03177, "loss": 1.28755, "time": 0.53459}
{"mode": "train", "epoch": 146, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03286, "loss": 1.25765, "time": 0.52768}
{"mode": "train", "epoch": 147, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03138, "loss": 1.3016, "time": 0.53006}
{"mode": "train", "epoch": 148, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03115, "loss": 1.33109, "time": 0.52277}
{"mode": "train", "epoch": 149, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.0313, "loss": 1.26814, "time": 0.52459}
{"mode": "train", "epoch": 150, "iter": 100, "lr": 1e-05, "memory": 13862, "data_time": 0.03137, "loss": 1.2777, "time": 0.52529}
{"mode": "val", "epoch": 150, "iter": 64, "lr": 1e-05, "accuracy_top-1": 92.54529, "accuracy_top-5": 99.76541}
