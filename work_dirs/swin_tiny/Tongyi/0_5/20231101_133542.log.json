{"env_info": "sys.platform: linux\nPython: 3.8.17 | packaged by conda-forge | (default, Jun 16 2023, 07:06:00) [GCC 11.4.0]\nCUDA available: True\nGPU 0,1,2: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.31057947_0\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.8.0\nMMCV: 1.4.2\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMClassification: 0.24.0+", "seed": 1899357403, "mmcls_version": "0.24.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformer',\n        arch='tiny',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            '/data4/lj/Classification/1.7/work_dirs/swin_tiny/Experience3/Test_Cluster/best_accuracy_top-1_epoch_36.pth',\n            prefix='backbone'),\n        img_size=224,\n        drop_path_rate=0.2),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=149,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(\n            type='LabelSmoothLoss',\n            label_smooth_val=0.1,\n            mode='original',\n            loss_weight=[\n                0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                1, 1, 1\n            ]),\n        cal_acc=False),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=149, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=149, prob=0.5)\n    ]))\nrand_increasing_policies = [\n    dict(type='AutoContrast'),\n    dict(type='Equalize'),\n    dict(type='Invert'),\n    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),\n    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),\n    dict(\n        type='SolarizeAdd',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 110)),\n    dict(\n        type='ColorTransform',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Brightness', magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(\n        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='horizontal'),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='vertical'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='horizontal'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='vertical')\n]\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='RandAugment',\n        policies=[\n            dict(type='AutoContrast'),\n            dict(type='Equalize'),\n            dict(type='Invert'),\n            dict(\n                type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n            dict(\n                type='Posterize', magnitude_key='bits',\n                magnitude_range=(4, 0)),\n            dict(\n                type='Solarize', magnitude_key='thr',\n                magnitude_range=(256, 0)),\n            dict(\n                type='SolarizeAdd',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 110)),\n            dict(\n                type='ColorTransform',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Contrast',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Brightness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Sharpness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='horizontal'),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='vertical'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='horizontal'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='vertical')\n        ],\n        num_policies=2,\n        total_level=10,\n        magnitude_level=9,\n        magnitude_std=0.5,\n        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),\n    dict(\n        type='RandomErasing',\n        erase_prob=0.25,\n        mode='rand',\n        min_area_ratio=0.02,\n        max_area_ratio=0.3333333333333333,\n        fill_color=[103.53, 116.28, 123.675],\n        fill_std=[57.375, 57.12, 58.395]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=150,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/TongYi/Cls_Standard',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='RandAugment',\n                policies=[\n                    dict(type='AutoContrast'),\n                    dict(type='Equalize'),\n                    dict(type='Invert'),\n                    dict(\n                        type='Rotate',\n                        magnitude_key='angle',\n                        magnitude_range=(0, 180)),\n                    dict(\n                        type='Posterize',\n                        magnitude_key='bits',\n                        magnitude_range=(4, 0)),\n                    dict(\n                        type='Solarize',\n                        magnitude_key='thr',\n                        magnitude_range=(256, 0)),\n                    dict(\n                        type='SolarizeAdd',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 110)),\n                    dict(\n                        type='ColorTransform',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Contrast',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Brightness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Sharpness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='horizontal'),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='vertical'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='horizontal'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='vertical')\n                ],\n                num_policies=2,\n                total_level=10,\n                magnitude_level=9,\n                magnitude_std=0.5,\n                hparams=dict(pad_val=[104, 116, 124],\n                             interpolation='bicubic')),\n            dict(\n                type='RandomErasing',\n                erase_prob=0.25,\n                mode='rand',\n                min_area_ratio=0.02,\n                max_area_ratio=0.3333333333333333,\n                fill_color=[103.53, 116.28, 123.675],\n                fill_std=[57.375, 57.12, 58.395]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        Batch_size=150),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/TongYi/cls_test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/Dataset/TongYi/cls_test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Jie_Pad', pad_size_h=224, pad_size_w=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=10, metric='accuracy')\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }))\noptimizer = dict(\n    type='AdamW',\n    lr=0.001,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        })))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    min_lr_ratio=0.01,\n    warmup='linear',\n    warmup_ratio=0.001,\n    warmup_iters=20,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=62)\ncheckpoint_config = dict(interval=30, save_optimizer=True)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = '/data4/lj/Classification/1.7/work_dirs/swin_tiny/Tongyi/0_5'\ngpu_ids = range(0, 3)\ndevice = 'cuda'\nseed = 1899357403\n", "CLASSES": ["negative", "yl_bmq_yytyqs_380p", "yl_ty_ALKAQUA_tykqs1500P", "yl_ty_ALKAQUA_tykqs570P", "yl_ty_ALKAQUA_tykqs570P_lb", "yl_ty_Aquamore_rsjlz500P", "yl_ty_Aquamore_rsjyw500P", "yl_ty_asm_btgy300P", "yl_ty_asm_btgy300P_6lb", "yl_ty_asm_btgy500P", "yl_ty_asm_jcnlyw450P", "yl_ty_asm_qtml300P", "yl_ty_asm_qtml300P_6lb", "yl_ty_asm_qtml500P", "yl_ty_asm_xncnnw360P", "yl_ty_asm_xncqkl360P", "yl_ty_asm_xncxnyw360P", "yl_ty_asm_yw1500P", "yl_ty_asm_yw300P", "yl_ty_asm_yw300P_6lb", "yl_ty_asm_yw500P", "yl_ty_asm_yyzsnc450P", "yl_ty_bhc_1000P", "yl_ty_bhc_2000P", "yl_ty_bhc_250P", "yl_ty_bhc_300P_6lb", "yl_ty_bhc_310P", "yl_ty_bhc_500P", "yl_ty_bhc_wt_500P", "yl_ty_blc_500P", "yl_ty_bnnc380P", "yl_ty_btxl_1000P", "yl_ty_btxl_500P", "yl_ty_clw_gsszlc500P", "yl_ty_clw_qgdhp420P", "yl_ty_clw_wtlc420P", "yl_ty_clw_wtlc420P_15", "yl_ty_clw_wtmlhc420P", "yl_ty_clw_wtmlhc420P_15", "yl_ty_clw_wttswlc300P", "yl_ty_clw_wtwlc300P_lb", "yl_ty_clw_wtwlc420P", "yl_ty_clw_wtwlc420P_15", "yl_ty_csd_yw250P", "yl_ty_dgz_mt1000P", "yl_ty_dgz_mt1250P", "yl_ty_dgz_mt1500P", "yl_ty_dgz_mt2000P", "yl_ty_dgz_mt450P", "yl_ty_dgz_sjpt1000P", "yl_ty_dgz_sjpt2000P", "yl_ty_dgz_xc1500P", "yl_ty_dgz_xc2000P", "yl_ty_dgz_xc250P", "yl_ty_dgz_xc250P_lb", "yl_ty_dgz_xc310P", "yl_ty_dmx_djzsdsyl250p", "yl_ty_dmx_djzydyl250p", "yl_ty_dmx_fms250P", "yl_ty_dmx_fms250P_lb", "yl_ty_dmx_jjnm250p", "yl_ty_dmx_jjnm250p_lb", "yl_ty_dmx_mlhc250p", "yl_ty_dmx_mlhc250p_lb", "yl_ty_dmx_nmhc250Np", "yl_ty_dmx_nmhc250p", "yl_ty_dmx_nmhc250p_lb", "yl_ty_dmx_qmlc250p", "yl_ty_dmx_qmlc250p_lb", "yl_ty_dmx_smt250p", "yl_ty_dmx_smt250p_lb", "yl_ty_dmx_tcw250P", "yl_ty_dmx_tcw250P_lb", "yl_ty_fjqs_nm500P", "yl_ty_fjqs_pg500P", "yl_ty_gcz_qjj280P", "yl_ty_hs_wssyl_1000P", "yl_ty_hsgnyl460P", "yl_ty_hsgnyl500P", "yl_ty_hzy_bxg", "yl_ty_hzy_bxg1000P", "yl_ty_hzy_hjl", "yl_ty_hzy_hjl1000P", "yl_ty_hzy_nm", "yl_ty_hzy_nm1000P", "yl_ty_hzy_nm330P", "yl_ty_hzy_nm330P_12lb", "yl_ty_hzy_nm330P_6lb", "yl_ty_jjnm_1000P", "yl_ty_jjnm_1500P", "yl_ty_jjnm_310P", "yl_ty_jjnm_500P", "yl_ty_lc_1000P", "yl_ty_lc_2000P", "yl_ty_lc_250P", "yl_ty_lc_310P", "yl_ty_lc_500P", "yl_ty_lks", "yl_ty_mllc_1000P", "yl_ty_mllc_500P", "yl_ty_mlmc1000P", "yl_ty_mlmc500P", "yl_ty_mtd_310P", "yl_ty_nc_mx310P", "yl_ty_nc_mxcmw250P", "yl_ty_nc_mxcmw250P_6lb", "yl_ty_nc_mxqkl250P", "yl_ty_nc_mxqkl250P_6lb", "yl_ty_nc_mxyw250P", "yl_ty_nc_mxyw250P_6lb", "yl_ty_qbd_gj180P", "yl_ty_qmlc500P", "yl_ty_qmlcN1000P", "yl_ty_qmlcN2000P", "yl_ty_qmlcN310P", "yl_ty_qmlcN500P", "yl_ty_schf_hzmr250P", "yl_ty_scnmc_1000P", "yl_ty_scnmc_500P", "yl_ty_scysx_1000P", "yl_ty_scysx_500P", "yl_ty_smt_1000P", "yl_ty_smt_310P", "yl_ty_smt_500P", "yl_ty_tmx_tsnmc250p", "yl_ty_xcd_cz450P", "yl_ty_xcd_cz450P_4lb", "yl_ty_xclc_310P", "yl_ty_xmtx_bjlc", "yl_ty_xmtx_cjwl", "yl_ty_xmtx_dmhc", "yl_ty_xmtx_lldc", "yl_ty_xmtx_lldc_300P", "yl_ty_xmtx_lldc_300P_6lb", "yl_ty_xmtx_qnhc", "yl_ty_xmtx_qnhc_300P", "yl_ty_xmtx_qnhc_300P_6lb", "yl_ty_xmtx_ysxnmc_480P", "yl_ty_yh_bkf450P", "yl_ty_yh_gwxlqs500p", "yl_ty_yh_nms1L", "yl_ty_yh_nms310P", "yl_ty_yh_yscxmk280P", "yl_ty_yh_yscxnt280P", "yl_ty_yh_yynt450P", "yl_ty_yqjx_cz300P", "yl_ty_yqjx_cz900P", "yl_ty_yqjx_ptz300P", "yl_ty_yzgl_270P"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 17209, "data_time": 0.03516, "loss": 4.67752, "time": 0.64063}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 17209, "data_time": 0.00108, "loss": 4.01693, "time": 0.59804}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 7e-05, "memory": 17209, "data_time": 0.03506, "loss": 3.27412, "time": 0.64188}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 9e-05, "memory": 17209, "data_time": 0.00114, "loss": 2.84582, "time": 0.61199}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00012, "memory": 17209, "data_time": 0.03561, "loss": 2.58811, "time": 0.64636}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00014, "memory": 17209, "data_time": 0.00121, "loss": 2.37477, "time": 0.60656}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00017, "memory": 17209, "data_time": 0.03392, "loss": 2.37081, "time": 0.64619}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.00019, "memory": 17209, "data_time": 0.00113, "loss": 2.29459, "time": 0.61242}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00022, "memory": 17209, "data_time": 0.03404, "loss": 2.27702, "time": 0.64461}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.00024, "memory": 17209, "data_time": 0.00115, "loss": 2.21504, "time": 0.60888}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.00027, "memory": 17209, "data_time": 0.03558, "loss": 2.1438, "time": 0.64127}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.00029, "memory": 17209, "data_time": 0.00124, "loss": 2.20504, "time": 0.61207}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.00031, "memory": 17209, "data_time": 0.0354, "loss": 2.1297, "time": 0.64493}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.00033, "memory": 17209, "data_time": 0.0011, "loss": 2.0183, "time": 0.61194}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.00036, "memory": 17209, "data_time": 0.03535, "loss": 2.05953, "time": 0.64362}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.00038, "memory": 17209, "data_time": 0.00124, "loss": 2.0444, "time": 0.61112}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.0004, "memory": 17209, "data_time": 0.03695, "loss": 2.01873, "time": 0.64461}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.00042, "memory": 17209, "data_time": 0.00123, "loss": 2.01569, "time": 0.6114}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.00045, "memory": 17209, "data_time": 0.03709, "loss": 2.04103, "time": 0.6426}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.00046, "memory": 17209, "data_time": 0.00124, "loss": 1.98382, "time": 0.60939}
{"mode": "val", "epoch": 10, "iter": 316, "lr": 0.00047, "accuracy_top-1": 51.04125, "accuracy_top-5": 61.70408}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.00049, "memory": 17209, "data_time": 0.03313, "loss": 1.94067, "time": 0.64211}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.0005, "memory": 17209, "data_time": 0.00128, "loss": 1.92117, "time": 0.60579}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.00053, "memory": 17209, "data_time": 0.03574, "loss": 1.94664, "time": 0.63989}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.00054, "memory": 17209, "data_time": 0.00118, "loss": 1.88672, "time": 0.60806}
{"mode": "train", "epoch": 13, "iter": 100, "lr": 0.00056, "memory": 17209, "data_time": 0.03714, "loss": 1.94806, "time": 0.63794}
{"mode": "train", "epoch": 13, "iter": 200, "lr": 0.00058, "memory": 17209, "data_time": 0.00137, "loss": 1.87271, "time": 0.60638}
{"mode": "train", "epoch": 14, "iter": 100, "lr": 0.0006, "memory": 17209, "data_time": 0.03402, "loss": 1.88007, "time": 0.64107}
{"mode": "train", "epoch": 14, "iter": 200, "lr": 0.00061, "memory": 17209, "data_time": 0.00138, "loss": 1.86697, "time": 0.61022}
{"mode": "train", "epoch": 15, "iter": 100, "lr": 0.00063, "memory": 17209, "data_time": 0.03486, "loss": 1.86005, "time": 0.64039}
{"mode": "train", "epoch": 15, "iter": 200, "lr": 0.00064, "memory": 17209, "data_time": 0.00113, "loss": 1.84101, "time": 0.60894}
{"mode": "train", "epoch": 16, "iter": 100, "lr": 0.00066, "memory": 17209, "data_time": 0.03357, "loss": 1.8474, "time": 0.6411}
{"mode": "train", "epoch": 16, "iter": 200, "lr": 0.00067, "memory": 17209, "data_time": 0.00134, "loss": 1.86826, "time": 0.61117}
{"mode": "train", "epoch": 17, "iter": 100, "lr": 0.00069, "memory": 17209, "data_time": 0.03459, "loss": 1.81185, "time": 0.64387}
{"mode": "train", "epoch": 17, "iter": 200, "lr": 0.0007, "memory": 17209, "data_time": 0.00141, "loss": 1.79924, "time": 0.61086}
{"mode": "train", "epoch": 18, "iter": 100, "lr": 0.00071, "memory": 17209, "data_time": 0.03394, "loss": 1.8063, "time": 0.64117}
{"mode": "train", "epoch": 18, "iter": 200, "lr": 0.00072, "memory": 17209, "data_time": 0.00126, "loss": 1.8111, "time": 0.61011}
{"mode": "train", "epoch": 19, "iter": 100, "lr": 0.00074, "memory": 17209, "data_time": 0.03606, "loss": 1.83405, "time": 0.6423}
{"mode": "train", "epoch": 19, "iter": 200, "lr": 0.00075, "memory": 17209, "data_time": 0.00121, "loss": 1.84765, "time": 0.61142}
{"mode": "train", "epoch": 20, "iter": 100, "lr": 0.00076, "memory": 17209, "data_time": 0.03658, "loss": 1.82212, "time": 0.63958}
{"mode": "train", "epoch": 20, "iter": 200, "lr": 0.00076, "memory": 17209, "data_time": 0.00129, "loss": 1.80154, "time": 0.60404}
{"mode": "val", "epoch": 20, "iter": 316, "lr": 0.00077, "accuracy_top-1": 51.26551, "accuracy_top-5": 60.75698}
{"mode": "train", "epoch": 21, "iter": 100, "lr": 0.00076, "memory": 17209, "data_time": 0.03519, "loss": 1.87572, "time": 0.64103}
{"mode": "train", "epoch": 21, "iter": 200, "lr": 0.00075, "memory": 17209, "data_time": 0.0012, "loss": 1.81675, "time": 0.61099}
{"mode": "train", "epoch": 22, "iter": 100, "lr": 0.00074, "memory": 17209, "data_time": 0.03511, "loss": 1.7819, "time": 0.64316}
{"mode": "train", "epoch": 22, "iter": 200, "lr": 0.00073, "memory": 17209, "data_time": 0.00117, "loss": 1.77204, "time": 0.61056}
{"mode": "train", "epoch": 23, "iter": 100, "lr": 0.00071, "memory": 17209, "data_time": 0.03571, "loss": 1.81007, "time": 0.64178}
{"mode": "train", "epoch": 23, "iter": 200, "lr": 0.0007, "memory": 17209, "data_time": 0.00122, "loss": 1.74411, "time": 0.61099}
{"mode": "train", "epoch": 24, "iter": 100, "lr": 0.00069, "memory": 17209, "data_time": 0.03667, "loss": 1.80171, "time": 0.64591}
{"mode": "train", "epoch": 24, "iter": 200, "lr": 0.00068, "memory": 17209, "data_time": 0.00126, "loss": 1.7971, "time": 0.60987}
{"mode": "train", "epoch": 25, "iter": 100, "lr": 0.00067, "memory": 17209, "data_time": 0.03507, "loss": 1.77269, "time": 0.64166}
{"mode": "train", "epoch": 25, "iter": 200, "lr": 0.00066, "memory": 17209, "data_time": 0.00132, "loss": 1.7405, "time": 0.60973}
{"mode": "train", "epoch": 26, "iter": 100, "lr": 0.00064, "memory": 17209, "data_time": 0.03758, "loss": 1.66739, "time": 0.6433}
{"mode": "train", "epoch": 26, "iter": 200, "lr": 0.00063, "memory": 17209, "data_time": 0.00122, "loss": 1.75966, "time": 0.60911}
{"mode": "train", "epoch": 27, "iter": 100, "lr": 0.00062, "memory": 17209, "data_time": 0.03559, "loss": 1.69183, "time": 0.64061}
{"mode": "train", "epoch": 27, "iter": 200, "lr": 0.00061, "memory": 17209, "data_time": 0.00106, "loss": 1.72358, "time": 0.60826}
{"mode": "train", "epoch": 28, "iter": 100, "lr": 0.00059, "memory": 17209, "data_time": 0.03698, "loss": 1.69291, "time": 0.64371}
{"mode": "train", "epoch": 28, "iter": 200, "lr": 0.00058, "memory": 17209, "data_time": 0.00107, "loss": 1.74901, "time": 0.60789}
{"mode": "train", "epoch": 29, "iter": 100, "lr": 0.00057, "memory": 17209, "data_time": 0.034, "loss": 1.69834, "time": 0.6406}
{"mode": "train", "epoch": 29, "iter": 200, "lr": 0.00056, "memory": 17209, "data_time": 0.00108, "loss": 1.74347, "time": 0.60715}
{"mode": "train", "epoch": 30, "iter": 100, "lr": 0.00054, "memory": 17209, "data_time": 0.03431, "loss": 1.72677, "time": 0.639}
{"mode": "train", "epoch": 30, "iter": 200, "lr": 0.00053, "memory": 17209, "data_time": 0.00125, "loss": 1.67439, "time": 0.60379}
