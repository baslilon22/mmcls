{"env_info": "sys.platform: linux\nPython: 3.8.17 | packaged by conda-forge | (default, Jun 16 2023, 07:06:00) [GCC 11.4.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.31057947_0\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.8.0\nMMCV: 1.4.2\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMClassification: 0.24.0+", "seed": 667948047, "mmcls_version": "0.24.0", "config": "train_data_root = '/data4/lj/forgery_Detect/Forgery_train_20231106'\ntest_data_root = '/data4/lj/forgery_Detect/Forgery_test_20231106'\nwork_dir = 'work_dirs/swin_tiny/Forgery_Detect'\nnum_classes = 2\nbatch_size = 25\nmax_epochs = 200\ninterval_save = 50\nmodel = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformer',\n        arch='tiny',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'pretrain_model/swin_tiny_224_b16x64_300e_imagenet_20210616_090925-66df6be6.pth',\n            prefix='backbone'),\n        img_size=224,\n        drop_path_rate=0.2),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=2,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(type='FocalLoss', gamma=2.0, alpha=0.25, reduction='mean'),\n        cal_acc=False),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ])\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Rotate', angle=8.0, interpolation='bicubic'),\n    dict(\n        type='Rotate',\n        angle=90.0,\n        interpolation='bicubic',\n        prob=0.1,\n        random_negative_prob=0.5),\n    dict(\n        type='Rotate',\n        angle=180.0,\n        interpolation='bicubic',\n        prob=0.1,\n        random_negative_prob=0.5),\n    dict(type='Resize', size=384),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='Resize', size=384),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=25,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/Forgery_train_20231106',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Rotate', angle=8.0, interpolation='bicubic'),\n            dict(\n                type='Rotate',\n                angle=90.0,\n                interpolation='bicubic',\n                prob=0.1,\n                random_negative_prob=0.5),\n            dict(\n                type='Rotate',\n                angle=180.0,\n                interpolation='bicubic',\n                prob=0.1,\n                random_negative_prob=0.5),\n            dict(type='Resize', size=384),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        Batch_size=25),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/Forgery_test_20231106',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=512),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/Forgery_test_20231106',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=512),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=10, metric='accuracy')\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }))\noptimizer = dict(\n    type='AdamW',\n    lr=0.001,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        })))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    min_lr_ratio=0.01,\n    warmup='linear',\n    warmup_ratio=0.001,\n    warmup_iters=20,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=200)\ncheckpoint_config = dict(interval=50, save_optimizer=True)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ngpu_ids = range(0, 2)\ndevice = 'cuda'\nseed = 667948047\n", "CLASSES": ["qualified", "unqualified"]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 9204, "data_time": 0.13474, "loss": 0.1435, "time": 0.68409}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.0, "memory": 9204, "data_time": 0.14483, "loss": 0.0693, "time": 0.57452}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 9204, "data_time": 0.21122, "loss": 0.02911, "time": 0.55159}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 9204, "data_time": 0.18581, "loss": 0.01296, "time": 0.52641}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 9204, "data_time": 0.23989, "loss": 0.00779, "time": 0.58077}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 9204, "data_time": 0.21002, "loss": 0.00429, "time": 0.55095}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 9204, "data_time": 0.17738, "loss": 0.0042, "time": 0.56007}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 9204, "data_time": 0.06484, "loss": 0.00225, "time": 0.56142}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 9204, "data_time": 0.22067, "loss": 0.00293, "time": 0.58538}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 9204, "data_time": 0.18638, "loss": 0.00346, "time": 0.53509}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 9204, "data_time": 0.09124, "loss": 0.00203, "time": 0.53196}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 9204, "data_time": 0.0708, "loss": 0.00255, "time": 0.58033}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 2e-05, "memory": 9204, "data_time": 0.20976, "loss": 0.0015, "time": 0.5802}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 2e-05, "memory": 9204, "data_time": 0.19513, "loss": 0.00112, "time": 0.53893}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 2e-05, "memory": 9204, "data_time": 0.21085, "loss": 0.0012, "time": 0.55624}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 9204, "data_time": 0.2164, "loss": 0.00075, "time": 0.56179}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 9204, "data_time": 0.18804, "loss": 0.00261, "time": 0.55537}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 9204, "data_time": 0.03569, "loss": 0.00276, "time": 0.57486}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 9204, "data_time": 0.20895, "loss": 0.0021, "time": 0.55831}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 9204, "data_time": 0.08505, "loss": 0.00078, "time": 0.57519}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 9204, "data_time": 0.00087, "loss": 0.00088, "time": 0.53895}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 9204, "data_time": 0.00093, "loss": 0.00076, "time": 0.56818}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 4e-05, "memory": 9204, "data_time": 0.06253, "loss": 0.00045, "time": 0.55912}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 4e-05, "memory": 9204, "data_time": 0.08931, "loss": 0.00148, "time": 0.57272}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 4e-05, "memory": 9204, "data_time": 0.13578, "loss": 0.00203, "time": 0.54261}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 4e-05, "memory": 9204, "data_time": 0.07091, "loss": 0.0011, "time": 0.56341}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 4e-05, "memory": 9204, "data_time": 0.00152, "loss": 0.00113, "time": 0.55744}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 4e-05, "memory": 9204, "data_time": 0.00089, "loss": 0.0008, "time": 0.54929}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 4e-05, "memory": 9204, "data_time": 0.02124, "loss": 0.00088, "time": 0.55916}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 5e-05, "memory": 9204, "data_time": 0.00078, "loss": 0.00252, "time": 0.61795}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 5e-05, "memory": 9204, "data_time": 0.00083, "loss": 0.00131, "time": 0.55769}
