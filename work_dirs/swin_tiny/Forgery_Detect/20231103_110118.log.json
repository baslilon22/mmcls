{"env_info": "sys.platform: linux\nPython: 3.8.17 | packaged by conda-forge | (default, Jun 16 2023, 07:06:00) [GCC 11.4.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.6\nNVCC: Build cuda_11.6.r11.6/compiler.31057947_0\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.8.0\nMMCV: 1.4.2\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMClassification: 0.24.0+", "seed": 2034043894, "mmcls_version": "0.24.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(\n        type='SwinTransformer',\n        arch='tiny',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint=\n            'pretrain_model/swin_tiny_224_b16x64_300e_imagenet_20210616_090925-66df6be6.pth',\n            prefix='backbone'),\n        img_size=224,\n        drop_path_rate=0.2),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=2,\n        in_channels=768,\n        init_cfg=None,\n        loss=dict(type='FocalLoss', gamma=2.0, alpha=0.25, reduction='mean'),\n        cal_acc=False),\n    init_cfg=[\n        dict(type='TruncNormal', layer='Linear', std=0.02, bias=0.0),\n        dict(type='Constant', layer='LayerNorm', val=1.0, bias=0.0)\n    ],\n    train_cfg=dict(augments=[\n        dict(type='BatchMixup', alpha=0.8, num_classes=2, prob=0.5),\n        dict(type='BatchCutMix', alpha=1.0, num_classes=2, prob=0.5)\n    ]))\nrand_increasing_policies = [\n    dict(type='AutoContrast'),\n    dict(type='Equalize'),\n    dict(type='Invert'),\n    dict(type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n    dict(type='Posterize', magnitude_key='bits', magnitude_range=(4, 0)),\n    dict(type='Solarize', magnitude_key='thr', magnitude_range=(256, 0)),\n    dict(\n        type='SolarizeAdd',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 110)),\n    dict(\n        type='ColorTransform',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(type='Contrast', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Brightness', magnitude_key='magnitude',\n        magnitude_range=(0, 0.9)),\n    dict(\n        type='Sharpness', magnitude_key='magnitude', magnitude_range=(0, 0.9)),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='horizontal'),\n    dict(\n        type='Shear',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.3),\n        direction='vertical'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='horizontal'),\n    dict(\n        type='Translate',\n        magnitude_key='magnitude',\n        magnitude_range=(0, 0.45),\n        direction='vertical')\n]\ndataset_type = 'CustomDataset'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n    dict(\n        type='RandAugment',\n        policies=[\n            dict(type='AutoContrast'),\n            dict(type='Equalize'),\n            dict(type='Invert'),\n            dict(\n                type='Rotate', magnitude_key='angle', magnitude_range=(0, 90)),\n            dict(\n                type='Posterize', magnitude_key='bits',\n                magnitude_range=(4, 0)),\n            dict(\n                type='Solarize', magnitude_key='thr',\n                magnitude_range=(256, 0)),\n            dict(\n                type='SolarizeAdd',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 110)),\n            dict(\n                type='ColorTransform',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Contrast',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Brightness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Sharpness',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.9)),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='horizontal'),\n            dict(\n                type='Shear',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.5),\n                direction='vertical'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='horizontal'),\n            dict(\n                type='Translate',\n                magnitude_key='magnitude',\n                magnitude_range=(0, 0.45),\n                direction='vertical')\n        ],\n        num_policies=2,\n        total_level=10,\n        magnitude_level=9,\n        magnitude_std=0.5,\n        hparams=dict(pad_val=[104, 116, 124], interpolation='bicubic')),\n    dict(\n        type='RandomErasing',\n        erase_prob=0.25,\n        mode='rand',\n        min_area_ratio=0.02,\n        max_area_ratio=0.3333333333333333,\n        fill_color=[103.53, 116.28, 123.675],\n        fill_std=[57.375, 57.12, 58.395]),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='ToTensor', keys=['gt_label']),\n    dict(type='Collect', keys=['img', 'gt_label'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['img']),\n    dict(type='Collect', keys=['img'])\n]\ndata = dict(\n    samples_per_gpu=30,\n    workers_per_gpu=4,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/dataset/train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=512),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='RandAugment',\n                policies=[\n                    dict(type='AutoContrast'),\n                    dict(type='Equalize'),\n                    dict(type='Invert'),\n                    dict(\n                        type='Rotate',\n                        magnitude_key='angle',\n                        magnitude_range=(0, 180)),\n                    dict(\n                        type='Posterize',\n                        magnitude_key='bits',\n                        magnitude_range=(4, 0)),\n                    dict(\n                        type='Solarize',\n                        magnitude_key='thr',\n                        magnitude_range=(256, 0)),\n                    dict(\n                        type='SolarizeAdd',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 110)),\n                    dict(\n                        type='ColorTransform',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Contrast',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Brightness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Sharpness',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.9)),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='horizontal'),\n                    dict(\n                        type='Shear',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.7),\n                        direction='vertical'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='horizontal'),\n                    dict(\n                        type='Translate',\n                        magnitude_key='magnitude',\n                        magnitude_range=(0, 0.45),\n                        direction='vertical')\n                ],\n                num_policies=2,\n                total_level=10,\n                magnitude_level=9,\n                magnitude_std=0.5,\n                hparams=dict(pad_val=[104, 116, 124],\n                             interpolation='bicubic')),\n            dict(\n                type='RandomErasing',\n                erase_prob=0.25,\n                mode='rand',\n                min_area_ratio=0.02,\n                max_area_ratio=0.3333333333333333,\n                fill_color=[103.53, 116.28, 123.675],\n                fill_std=[57.375, 57.12, 58.395]),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ],\n        Batch_size=30),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/dataset/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=512),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='/data4/lj/forgery_Detect/dataset/test',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=512),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=10, metric='accuracy')\nparamwise_cfg = dict(\n    norm_decay_mult=0.0,\n    bias_decay_mult=0.0,\n    custom_keys=dict({\n        '.absolute_pos_embed': dict(decay_mult=0.0),\n        '.relative_position_bias_table': dict(decay_mult=0.0)\n    }))\noptimizer = dict(\n    type='AdamW',\n    lr=0.001,\n    weight_decay=0.05,\n    eps=1e-08,\n    betas=(0.9, 0.999),\n    paramwise_cfg=dict(\n        norm_decay_mult=0.0,\n        bias_decay_mult=0.0,\n        custom_keys=dict({\n            '.absolute_pos_embed': dict(decay_mult=0.0),\n            '.relative_position_bias_table': dict(decay_mult=0.0)\n        })))\noptimizer_config = dict(grad_clip=dict(max_norm=5.0))\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    min_lr_ratio=0.01,\n    warmup='linear',\n    warmup_ratio=0.001,\n    warmup_iters=20,\n    warmup_by_epoch=True)\nrunner = dict(type='EpochBasedRunner', max_epochs=150)\ncheckpoint_config = dict(interval=30, save_optimizer=True)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'Classification/1.7/work_dirs/swin_tiny/Forgery_Detect'\ngpu_ids = [0]\ndevice = 'cuda'\nseed = 2034043894\n", "CLASSES": ["qualified", "unqualified"]}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 19022, "data_time": 0.03594, "loss": 0.10705, "grad_norm": 0.72148, "time": 0.69494}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 19022, "data_time": 0.00082, "loss": 0.06192, "grad_norm": 0.79382, "time": 0.64505}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 5e-05, "memory": 19022, "data_time": 0.00079, "loss": 0.05119, "grad_norm": 0.92655, "time": 0.64807}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 7e-05, "memory": 19022, "data_time": 0.03497, "loss": 0.05462, "grad_norm": 0.99933, "time": 0.68188}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 8e-05, "memory": 19022, "data_time": 0.00074, "loss": 0.05467, "grad_norm": 0.85099, "time": 0.6482}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.0001, "memory": 19022, "data_time": 0.00078, "loss": 0.05175, "grad_norm": 0.85212, "time": 0.64891}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.00012, "memory": 19022, "data_time": 0.03673, "loss": 0.05647, "grad_norm": 0.6514, "time": 0.68241}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.00013, "memory": 19022, "data_time": 0.00074, "loss": 0.05174, "grad_norm": 0.65104, "time": 0.64742}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.00015, "memory": 19022, "data_time": 0.00075, "loss": 0.06197, "grad_norm": 0.75564, "time": 0.64776}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00017, "memory": 19022, "data_time": 0.03646, "loss": 0.05118, "grad_norm": 0.57519, "time": 0.68248}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.00018, "memory": 19022, "data_time": 0.00072, "loss": 0.06209, "grad_norm": 0.61961, "time": 0.64726}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.0002, "memory": 19022, "data_time": 0.00072, "loss": 0.05539, "grad_norm": 0.6128, "time": 0.64707}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00022, "memory": 19022, "data_time": 0.03496, "loss": 0.0549, "grad_norm": 0.63114, "time": 0.68171}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.00023, "memory": 19022, "data_time": 0.00075, "loss": 0.06176, "grad_norm": 0.5474, "time": 0.64744}
{"mode": "train", "epoch": 5, "iter": 300, "lr": 0.00024, "memory": 19022, "data_time": 0.00073, "loss": 0.06565, "grad_norm": 0.57393, "time": 0.64698}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.00026, "memory": 19022, "data_time": 0.03657, "loss": 0.06491, "grad_norm": 0.44387, "time": 0.68321}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.00028, "memory": 19022, "data_time": 0.00074, "loss": 0.05606, "grad_norm": 0.44088, "time": 0.64754}
{"mode": "train", "epoch": 6, "iter": 300, "lr": 0.00029, "memory": 19022, "data_time": 0.00075, "loss": 0.06336, "grad_norm": 0.45319, "time": 0.64779}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.00031, "memory": 19022, "data_time": 0.03584, "loss": 0.06062, "grad_norm": 0.45511, "time": 0.68239}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.00033, "memory": 19022, "data_time": 0.00074, "loss": 0.05944, "grad_norm": 0.45763, "time": 0.6478}
{"mode": "train", "epoch": 7, "iter": 300, "lr": 0.00034, "memory": 19022, "data_time": 0.00073, "loss": 0.07293, "grad_norm": 0.5172, "time": 0.64693}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.00036, "memory": 19022, "data_time": 0.03608, "loss": 0.06792, "grad_norm": 0.39807, "time": 0.68141}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.00038, "memory": 19022, "data_time": 0.00076, "loss": 0.06449, "grad_norm": 0.37603, "time": 0.64719}
{"mode": "train", "epoch": 8, "iter": 300, "lr": 0.00039, "memory": 19022, "data_time": 0.00075, "loss": 0.06421, "grad_norm": 0.39543, "time": 0.64747}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.00041, "memory": 19022, "data_time": 0.03598, "loss": 0.06347, "grad_norm": 0.37703, "time": 0.68156}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.00043, "memory": 19022, "data_time": 0.00072, "loss": 0.05933, "grad_norm": 0.31844, "time": 0.64605}
{"mode": "train", "epoch": 9, "iter": 300, "lr": 0.00044, "memory": 19022, "data_time": 0.00074, "loss": 0.05967, "grad_norm": 0.3267, "time": 0.64669}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.00046, "memory": 19022, "data_time": 0.03513, "loss": 0.06828, "grad_norm": 0.34186, "time": 0.68034}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.00048, "memory": 19022, "data_time": 0.00076, "loss": 0.06838, "grad_norm": 0.35117, "time": 0.64803}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 0.00049, "memory": 19022, "data_time": 0.00078, "loss": 0.07093, "grad_norm": 0.3103, "time": 0.64733}
